// Code generated by Polytomic. DO NOT EDIT.
// edit connections.yaml and re-run go generate

package provider

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/AlekSi/pointer"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/mitchellh/mapstructure"
	"github.com/polytomic/polytomic-go"
	ptclient "github.com/polytomic/polytomic-go/client"
	ptcore "github.com/polytomic/polytomic-go/core"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
)

// Ensure provider defined types fully satisfy framework interfaces
var _ resource.Resource = &PostgresqlConnectionResource{}
var _ resource.ResourceWithImportState = &PostgresqlConnectionResource{}

func (t *PostgresqlConnectionResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: ":meta:subcategory:Connections: PostgresSQL Connection",
		Attributes: map[string]schema.Attribute{
			"organization": schema.StringAttribute{
				MarkdownDescription: "Organization ID",
				Optional:            true,
				Computed:            true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"configuration": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"hostname": schema.StringAttribute{
						MarkdownDescription: "",
						Required:            true,
						Optional:            false,
						Computed:            false,
						Sensitive:           false,
					},
					"username": schema.StringAttribute{
						MarkdownDescription: "",
						Required:            true,
						Optional:            false,
						Computed:            false,
						Sensitive:           false,
					},
					"password": schema.StringAttribute{
						MarkdownDescription: "",
						Required:            true,
						Optional:            false,
						Computed:            false,
						Sensitive:           true,
					},
					"database": schema.StringAttribute{
						MarkdownDescription: "",
						Required:            true,
						Optional:            false,
						Computed:            false,
						Sensitive:           false,
					},
					"port": schema.Int64Attribute{
						MarkdownDescription: "",
						Required:            true,
						Optional:            false,
						Computed:            false,
						Sensitive:           false,
					},
					"ssl": schema.BoolAttribute{
						MarkdownDescription: "",
						Required:            false,
						Optional:            true,
						Computed:            true,
						Sensitive:           false,
					},
					"client_certs": schema.BoolAttribute{
						MarkdownDescription: "",
						Required:            false,
						Optional:            true,
						Computed:            true,
						Sensitive:           false,
					},
					"client_certificate": schema.StringAttribute{
						MarkdownDescription: "",
						Required:            false,
						Optional:            true,
						Computed:            true,
						Sensitive:           false,
						Default:             stringdefault.StaticString(""),
					},
					"client_key": schema.StringAttribute{
						MarkdownDescription: "",
						Required:            false,
						Optional:            true,
						Computed:            true,
						Sensitive:           true,
						Default:             stringdefault.StaticString(""),
					},
					"ca_cert": schema.StringAttribute{
						MarkdownDescription: "",
						Required:            false,
						Optional:            true,
						Computed:            true,
						Sensitive:           false,
						Default:             stringdefault.StaticString(""),
					},
					"change_detection": schema.BoolAttribute{
						MarkdownDescription: "",
						Required:            false,
						Optional:            true,
						Computed:            true,
						Sensitive:           false,
					},
					"publication": schema.StringAttribute{
						MarkdownDescription: "",
						Required:            false,
						Optional:            true,
						Computed:            true,
						Sensitive:           false,
						Default:             stringdefault.StaticString(""),
					},
					"ssh": schema.BoolAttribute{
						MarkdownDescription: "",
						Required:            false,
						Optional:            true,
						Computed:            true,
						Sensitive:           false,
					},
					"ssh_user": schema.StringAttribute{
						MarkdownDescription: "",
						Required:            false,
						Optional:            true,
						Computed:            true,
						Sensitive:           false,
						Default:             stringdefault.StaticString(""),
					},
					"ssh_host": schema.StringAttribute{
						MarkdownDescription: "",
						Required:            false,
						Optional:            true,
						Computed:            true,
						Sensitive:           false,
						Default:             stringdefault.StaticString(""),
					},
					"ssh_port": schema.Int64Attribute{
						MarkdownDescription: "",
						Required:            false,
						Optional:            true,
						Computed:            true,
						Sensitive:           false,
						Default:             int64default.StaticInt64(0),
					},
					"ssh_private_key": schema.StringAttribute{
						MarkdownDescription: "",
						Required:            false,
						Optional:            true,
						Computed:            true,
						Sensitive:           true,
						Default:             stringdefault.StaticString(""),
					},
				},

				Required: true,
			},
			"force_destroy": schema.BoolAttribute{
				MarkdownDescription: forceDestroyMessage,
				Optional:            true,
			},
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "PostgresSQL Connection identifier",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

func (r *PostgresqlConnectionResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_postgresql_connection"
}

type PostgresqlConnectionResource struct {
	client *ptclient.Client
}

type PostgresqlConf struct {
	Hostname string `mapstructure:"hostname" tfsdk:"hostname"`

	Username string `mapstructure:"username" tfsdk:"username"`

	Password string `mapstructure:"password" tfsdk:"password"`

	Database string `mapstructure:"database" tfsdk:"database"`

	Port int `mapstructure:"port" tfsdk:"port"`

	Ssl bool `mapstructure:"ssl" tfsdk:"ssl"`

	Client_certs bool `mapstructure:"client_certs" tfsdk:"client_certs"`

	Client_certificate string `mapstructure:"client_certificate" tfsdk:"client_certificate"`

	Client_key string `mapstructure:"client_key" tfsdk:"client_key"`

	Ca_cert string `mapstructure:"ca_cert" tfsdk:"ca_cert"`

	Change_detection bool `mapstructure:"change_detection" tfsdk:"change_detection"`

	Publication string `mapstructure:"publication" tfsdk:"publication"`

	Ssh bool `mapstructure:"ssh" tfsdk:"ssh"`

	Ssh_user string `mapstructure:"ssh_user" tfsdk:"ssh_user"`

	Ssh_host string `mapstructure:"ssh_host" tfsdk:"ssh_host"`

	Ssh_port int `mapstructure:"ssh_port" tfsdk:"ssh_port"`

	Ssh_private_key string `mapstructure:"ssh_private_key" tfsdk:"ssh_private_key"`
}

func (r *PostgresqlConnectionResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data connectionData

	diags := req.Config.Get(ctx, &data)
	resp.Diagnostics.Append(diags...)

	if resp.Diagnostics.HasError() {
		return
	}

	created, err := r.client.Connections.Create(ctx, &polytomic.CreateConnectionRequestSchema{
		Name:           data.Name.ValueString(),
		Type:           "postgresql",
		OrganizationId: data.Organization.ValueStringPointer(),
		Configuration: map[string]interface{}{
			"hostname":           data.Configuration.Attributes()["hostname"].(types.String).ValueString(),
			"username":           data.Configuration.Attributes()["username"].(types.String).ValueString(),
			"password":           data.Configuration.Attributes()["password"].(types.String).ValueString(),
			"database":           data.Configuration.Attributes()["database"].(types.String).ValueString(),
			"port":               int(data.Configuration.Attributes()["port"].(types.Int64).ValueInt64()),
			"ssl":                data.Configuration.Attributes()["ssl"].(types.Bool).ValueBool(),
			"client_certs":       data.Configuration.Attributes()["client_certs"].(types.Bool).ValueBool(),
			"client_certificate": data.Configuration.Attributes()["client_certificate"].(types.String).ValueString(),
			"client_key":         data.Configuration.Attributes()["client_key"].(types.String).ValueString(),
			"ca_cert":            data.Configuration.Attributes()["ca_cert"].(types.String).ValueString(),
			"change_detection":   data.Configuration.Attributes()["change_detection"].(types.Bool).ValueBool(),
			"publication":        data.Configuration.Attributes()["publication"].(types.String).ValueString(),
			"ssh":                data.Configuration.Attributes()["ssh"].(types.Bool).ValueBool(),
			"ssh_user":           data.Configuration.Attributes()["ssh_user"].(types.String).ValueString(),
			"ssh_host":           data.Configuration.Attributes()["ssh_host"].(types.String).ValueString(),
			"ssh_port":           int(data.Configuration.Attributes()["ssh_port"].(types.Int64).ValueInt64()),
			"ssh_private_key":    data.Configuration.Attributes()["ssh_private_key"].(types.String).ValueString(),
		},
		Validate: pointer.ToBool(false),
	})
	if err != nil {
		resp.Diagnostics.AddError(clientError, fmt.Sprintf("Error creating connection: %s", err))
		return
	}
	data.Id = types.StringPointerValue(created.Data.Id)
	data.Name = types.StringPointerValue(created.Data.Name)
	data.Organization = types.StringPointerValue(created.Data.OrganizationId)

	conf := PostgresqlConf{}
	err = mapstructure.Decode(created.Data.Configuration, &conf)
	if err != nil {
		resp.Diagnostics.AddError(clientError, fmt.Sprintf("Error decoding connection configuration: %s", err))
	}

	data.Configuration, diags = types.ObjectValueFrom(ctx, map[string]attr.Type{
		"hostname":           types.StringType,
		"username":           types.StringType,
		"password":           types.StringType,
		"database":           types.StringType,
		"port":               types.NumberType,
		"ssl":                types.BoolType,
		"client_certs":       types.BoolType,
		"client_certificate": types.StringType,
		"client_key":         types.StringType,
		"ca_cert":            types.StringType,
		"change_detection":   types.BoolType,
		"publication":        types.StringType,
		"ssh":                types.BoolType,
		"ssh_user":           types.StringType,
		"ssh_host":           types.StringType,
		"ssh_port":           types.NumberType,
		"ssh_private_key":    types.StringType,
	}, conf)
	if diags.HasError() {
		resp.Diagnostics.Append(diags...)
		return
	}

	tflog.Trace(ctx, "created a connection", map[string]interface{}{"type": "Postgresql", "id": created.Data.Id})

	diags = resp.State.Set(ctx, &data)
	resp.Diagnostics.Append(diags...)
}

func (r *PostgresqlConnectionResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data connectionData

	diags := req.State.Get(ctx, &data)
	resp.Diagnostics.Append(diags...)

	if resp.Diagnostics.HasError() {
		return
	}

	connection, err := r.client.Connections.Get(ctx, data.Id.ValueString())
	if err != nil {
		pErr := &ptcore.APIError{}
		if errors.As(err, &pErr) {
			if pErr.StatusCode == http.StatusNotFound {
				resp.State.RemoveResource(ctx)
				return
			}
		}
		resp.Diagnostics.AddError(clientError, fmt.Sprintf("Error reading connection: %s", err))
		return
	}
	data.Id = types.StringPointerValue(connection.Data.Id)
	data.Name = types.StringPointerValue(connection.Data.Name)
	data.Organization = types.StringPointerValue(connection.Data.OrganizationId)

	conf := PostgresqlConf{}
	err = mapstructure.Decode(connection.Data.Configuration, &conf)
	if err != nil {
		resp.Diagnostics.AddError(clientError, fmt.Sprintf("Error decoding connection configuration: %s", err))
	}

	data.Configuration, diags = types.ObjectValueFrom(ctx, map[string]attr.Type{
		"hostname":           types.StringType,
		"username":           types.StringType,
		"password":           types.StringType,
		"database":           types.StringType,
		"port":               types.NumberType,
		"ssl":                types.BoolType,
		"client_certs":       types.BoolType,
		"client_certificate": types.StringType,
		"client_key":         types.StringType,
		"ca_cert":            types.StringType,
		"change_detection":   types.BoolType,
		"publication":        types.StringType,
		"ssh":                types.BoolType,
		"ssh_user":           types.StringType,
		"ssh_host":           types.StringType,
		"ssh_port":           types.NumberType,
		"ssh_private_key":    types.StringType,
	}, conf)
	if diags.HasError() {
		resp.Diagnostics.Append(diags...)
		return
	}

	diags = resp.State.Set(ctx, &data)
	resp.Diagnostics.Append(diags...)
}

func (r *PostgresqlConnectionResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data connectionData

	diags := req.Plan.Get(ctx, &data)
	resp.Diagnostics.Append(diags...)

	if resp.Diagnostics.HasError() {
		return
	}

	updated, err := r.client.Connections.Update(ctx,
		data.Id.ValueString(),
		&polytomic.UpdateConnectionRequestSchema{
			Name:           data.Name.ValueString(),
			OrganizationId: data.Organization.ValueStringPointer(),
			Configuration: map[string]interface{}{
				"hostname":           data.Configuration.Attributes()["hostname"].(types.String).ValueString(),
				"username":           data.Configuration.Attributes()["username"].(types.String).ValueString(),
				"password":           data.Configuration.Attributes()["password"].(types.String).ValueString(),
				"database":           data.Configuration.Attributes()["database"].(types.String).ValueString(),
				"port":               int(data.Configuration.Attributes()["port"].(types.Int64).ValueInt64()),
				"ssl":                data.Configuration.Attributes()["ssl"].(types.Bool).ValueBool(),
				"client_certs":       data.Configuration.Attributes()["client_certs"].(types.Bool).ValueBool(),
				"client_certificate": data.Configuration.Attributes()["client_certificate"].(types.String).ValueString(),
				"client_key":         data.Configuration.Attributes()["client_key"].(types.String).ValueString(),
				"ca_cert":            data.Configuration.Attributes()["ca_cert"].(types.String).ValueString(),
				"change_detection":   data.Configuration.Attributes()["change_detection"].(types.Bool).ValueBool(),
				"publication":        data.Configuration.Attributes()["publication"].(types.String).ValueString(),
				"ssh":                data.Configuration.Attributes()["ssh"].(types.Bool).ValueBool(),
				"ssh_user":           data.Configuration.Attributes()["ssh_user"].(types.String).ValueString(),
				"ssh_host":           data.Configuration.Attributes()["ssh_host"].(types.String).ValueString(),
				"ssh_port":           int(data.Configuration.Attributes()["ssh_port"].(types.Int64).ValueInt64()),
				"ssh_private_key":    data.Configuration.Attributes()["ssh_private_key"].(types.String).ValueString(),
			},
			Validate: pointer.ToBool(false),
		})
	if err != nil {
		resp.Diagnostics.AddError(clientError, fmt.Sprintf("Error updating connection: %s", err))
		return
	}

	data.Id = types.StringPointerValue(updated.Data.Id)
	data.Name = types.StringPointerValue(updated.Data.Name)
	data.Organization = types.StringPointerValue(updated.Data.OrganizationId)

	conf := PostgresqlConf{}
	err = mapstructure.Decode(updated.Data.Configuration, &conf)
	if err != nil {
		resp.Diagnostics.AddError(clientError, fmt.Sprintf("Error decoding connection configuration: %s", err))
	}

	data.Configuration, diags = types.ObjectValueFrom(ctx, map[string]attr.Type{
		"hostname":           types.StringType,
		"username":           types.StringType,
		"password":           types.StringType,
		"database":           types.StringType,
		"port":               types.NumberType,
		"ssl":                types.BoolType,
		"client_certs":       types.BoolType,
		"client_certificate": types.StringType,
		"client_key":         types.StringType,
		"ca_cert":            types.StringType,
		"change_detection":   types.BoolType,
		"publication":        types.StringType,
		"ssh":                types.BoolType,
		"ssh_user":           types.StringType,
		"ssh_host":           types.StringType,
		"ssh_port":           types.NumberType,
		"ssh_private_key":    types.StringType,
	}, conf)
	if diags.HasError() {
		resp.Diagnostics.Append(diags...)
		return
	}
	diags = resp.State.Set(ctx, &data)
	resp.Diagnostics.Append(diags...)
}

func (r *PostgresqlConnectionResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data connectionData

	diags := req.State.Get(ctx, &data)
	resp.Diagnostics.Append(diags...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.ForceDestroy.ValueBool() {
		err := r.client.Connections.Remove(ctx, data.Id.ValueString(), &polytomic.ConnectionsRemoveRequest{
			Force: pointer.ToBool(true),
		})
		if err != nil {
			pErr := &polytomic.NotFoundError{}
			if errors.As(err, &pErr) {
				resp.State.RemoveResource(ctx)
				return
			}

			resp.Diagnostics.AddError(clientError, fmt.Sprintf("Error deleting connection: %s", err))
		}
		return
	}

	err := r.client.Connections.Remove(ctx, data.Id.ValueString(), &polytomic.ConnectionsRemoveRequest{
		Force: pointer.ToBool(false),
	})
	if err != nil {
		pErr := &polytomic.NotFoundError{}
		if errors.As(err, &pErr) {
			resp.State.RemoveResource(ctx)
			return
		}
	}
	pErr := &polytomic.UnprocessableEntityError{}
	if errors.As(err, &pErr) {
		if strings.Contains(*pErr.Body.Message, "connection in use") {
			for _, meta := range pErr.Body.Metadata.([]interface{}) {
				info := meta.(map[string]interface{})
				resp.Diagnostics.AddError("Connection in use",
					fmt.Sprintf("Connection is used by %s \"%s\" (%s). Please remove before deleting this connection.",
						info["type"], info["name"], info["id"]),
				)
			}
			return
		}
	}

	resp.Diagnostics.AddError(clientError, fmt.Sprintf("Error deleting connection: %s", err))

}

func (r *PostgresqlConnectionResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}

func (r *PostgresqlConnectionResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*ptclient.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *polytomic.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}
