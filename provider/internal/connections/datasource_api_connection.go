// Code generated by Polytomic. DO NOT EDIT.
// edit connections.yaml and re-run go generate

package connections

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/polytomic/terraform-provider-polytomic/provider/internal/providerclient"
)

// Ensure provider defined types fully satisfy framework interfaces
var _ datasource.DataSource = &ApiConnectionDataSource{}

// ExampleDataSource defines the data source implementation.
type ApiConnectionDataSource struct {
	provider *providerclient.Provider
}

func (d *ApiConnectionDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if provider := providerclient.GetProvider(req.ProviderData, resp.Diagnostics); provider != nil {
		d.provider = provider
	}
}

func (d *ApiConnectionDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_api_connection"
}

func (d *ApiConnectionDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: ":meta:subcategory:Connections: HTTP API Connection",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "",
				Required:            true,
			},
			"organization": schema.StringAttribute{
				MarkdownDescription: "",
				Optional:            true,
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "",
				Computed:            true,
			},
			"configuration": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"auth": schema.SingleNestedAttribute{
						MarkdownDescription: `Authentication method`,
						Computed:            true,
						Attributes: map[string]schema.Attribute{
							"basic": schema.SingleNestedAttribute{
								MarkdownDescription: `Basic authentication`,
								Computed:            true,
								Attributes: map[string]schema.Attribute{
									"password": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            true,
									},
									"username": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            true,
									},
								},
							},
							"header": schema.SingleNestedAttribute{
								MarkdownDescription: `Header key`,
								Computed:            true,
								Attributes: map[string]schema.Attribute{
									"name": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            true,
									},
									"value": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            true,
									},
								},
							},
							"oauth": schema.SingleNestedAttribute{
								MarkdownDescription: ``,
								Computed:            true,
								Attributes: map[string]schema.Attribute{
									"auth_style": schema.Int64Attribute{
										MarkdownDescription: `Auth style`,
										Computed:            true,
									},
									"client_id": schema.StringAttribute{
										MarkdownDescription: `Client ID`,
										Computed:            true,
									},
									"client_secret": schema.StringAttribute{
										MarkdownDescription: `Client secret`,
										Computed:            true,
									},
									"extra_form_data": schema.SetNestedAttribute{
										MarkdownDescription: `Extra form data`,
										Computed:            true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"name": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            true,
												},
												"value": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            true,
												},
											},
										},
									},
									"scopes": schema.SetAttribute{
										MarkdownDescription: ``,
										Computed:            true,
										ElementType:         types.StringType,
									},
									"token_endpoint": schema.StringAttribute{
										MarkdownDescription: `Token endpoint`,
										Computed:            true,
									},
								},
							},
						},
					},
					"body": schema.StringAttribute{
						MarkdownDescription: `JSON payload`,
						Computed:            true,
					},
					"headers": schema.SetNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            true,
								},
								"value": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            true,
								},
							},
						},
					},
					"healthcheck": schema.StringAttribute{
						MarkdownDescription: `Health check endpoint

    Path to request when checking the health of this connection. No health check will be performed if left empty.`,
						Computed: true,
					},
					"parameters": schema.SetNestedAttribute{
						MarkdownDescription: `Query string parameters`,
						Computed:            true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            true,
								},
								"value": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            true,
								},
							},
						},
					},
					"url": schema.StringAttribute{
						MarkdownDescription: `Base URL`,
						Computed:            true,
					},
				},
				Optional: true,
			},
		},
	}
}

func (d *ApiConnectionDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data connectionData

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Get the connection
	client, err := d.provider.Client(data.Organization.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error getting client", err.Error())
		return
	}
	connection, err := client.Connections.Get(ctx, data.Id.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error getting connection", err.Error())
		return
	}

	data.Id = types.StringPointerValue(connection.Data.Id)
	data.Name = types.StringPointerValue(connection.Data.Name)
	data.Organization = types.StringPointerValue(connection.Data.OrganizationId)
	var diags diag.Diagnostics
	data.Configuration, diags = types.ObjectValue(
		data.Configuration.AttributeTypes(ctx),
		map[string]attr.Value{
			"auth": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["auth"], "string").(string),
			),
			"body": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["body"], "string").(string),
			),
			"headers": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["headers"], "string").(string),
			),
			"healthcheck": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["healthcheck"], "string").(string),
			),
			"parameters": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["parameters"], "string").(string),
			),
			"url": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["url"], "string").(string),
			),
		},
	)

	if diags.HasError() {
		resp.Diagnostics.Append(diags...)
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
