// Code generated by Polytomic. DO NOT EDIT.
// edit connections.yaml and re-run go generate

package connections

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/polytomic/terraform-provider-polytomic/provider/internal/providerclient"
)

// Ensure provider defined types fully satisfy framework interfaces
var _ datasource.DataSource = &RedshiftserverlessConnectionDataSource{}

// ExampleDataSource defines the data source implementation.
type RedshiftserverlessConnectionDataSource struct {
	provider *providerclient.Provider
}

func (d *RedshiftserverlessConnectionDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if provider := providerclient.GetProvider(req.ProviderData, resp.Diagnostics); provider != nil {
		d.provider = provider
	}
}

func (d *RedshiftserverlessConnectionDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_redshiftserverless_connection"
}

func (d *RedshiftserverlessConnectionDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: ":meta:subcategory:Connections: Redshift Serverless Connection",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "",
				Required:            true,
			},
			"organization": schema.StringAttribute{
				MarkdownDescription: "",
				Optional:            true,
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "",
				Computed:            true,
			},
			"configuration": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"bulk_sync_staging_schema": schema.StringAttribute{
						MarkdownDescription: `Staging schema name`,
						Computed:            true,
					},
					"connection_method": schema.StringAttribute{
						MarkdownDescription: `Connection method`,
						Computed:            true,
					},
					"data_api_endpoint": schema.StringAttribute{
						MarkdownDescription: `Redshift Data API endpoint

    Example: https://redshift-data.us-west-2.amazonaws.com`,
						Computed: true,
					},
					"database": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            true,
					},
					"endpoint": schema.StringAttribute{
						MarkdownDescription: `Redshift Serverless endpoint`,
						Computed:            true,
					},
					"external_id": schema.StringAttribute{
						MarkdownDescription: `External ID`,
						Computed:            true,
					},
					"iam_role_arn": schema.StringAttribute{
						MarkdownDescription: `IAM Role ARN`,
						Computed:            true,
					},
					"override_endpoint": schema.BoolAttribute{
						MarkdownDescription: `Override Redshift Data API endpoint`,
						Computed:            true,
					},
					"region": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            true,
					},
					"s3_bucket_name": schema.StringAttribute{
						MarkdownDescription: `S3 bucket name (destination/unload support only)`,
						Computed:            true,
					},
					"s3_bucket_region": schema.StringAttribute{
						MarkdownDescription: `S3 bucket region (destination/unload support only)`,
						Computed:            true,
					},
					"use_bulk_sync_staging_schema": schema.BoolAttribute{
						MarkdownDescription: `Use custom bulk sync staging schema`,
						Computed:            true,
					},
					"use_unload": schema.BoolAttribute{
						MarkdownDescription: `Read data using Unload`,
						Computed:            true,
					},
					"workgroup": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            true,
					},
				},
				Optional: true,
			},
		},
	}
}

func (d *RedshiftserverlessConnectionDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data connectionData

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Get the connection
	client, err := d.provider.Client(data.Organization.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error getting client", err.Error())
		return
	}
	connection, err := client.Connections.Get(ctx, data.Id.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error getting connection", err.Error())
		return
	}

	data.Id = types.StringPointerValue(connection.Data.Id)
	data.Name = types.StringPointerValue(connection.Data.Name)
	data.Organization = types.StringPointerValue(connection.Data.OrganizationId)
	var diags diag.Diagnostics
	data.Configuration, diags = types.ObjectValue(
		data.Configuration.AttributeTypes(ctx),
		map[string]attr.Value{
			"bulk_sync_staging_schema": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["bulk_sync_staging_schema"], "string").(string),
			),
			"connection_method": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["connection_method"], "string").(string),
			),
			"data_api_endpoint": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["data_api_endpoint"], "string").(string),
			),
			"database": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["database"], "string").(string),
			),
			"endpoint": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["endpoint"], "string").(string),
			),
			"external_id": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["external_id"], "string").(string),
			),
			"iam_role_arn": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["iam_role_arn"], "string").(string),
			),
			"override_endpoint": types.BoolValue(
				getValueOrEmpty(connection.Data.Configuration["override_endpoint"], "bool").(bool),
			),
			"region": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["region"], "string").(string),
			),
			"s3_bucket_name": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["s3_bucket_name"], "string").(string),
			),
			"s3_bucket_region": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["s3_bucket_region"], "string").(string),
			),
			"use_bulk_sync_staging_schema": types.BoolValue(
				getValueOrEmpty(connection.Data.Configuration["use_bulk_sync_staging_schema"], "bool").(bool),
			),
			"use_unload": types.BoolValue(
				getValueOrEmpty(connection.Data.Configuration["use_unload"], "bool").(bool),
			),
			"workgroup": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["workgroup"], "string").(string),
			),
		},
	)

	if diags.HasError() {
		resp.Diagnostics.Append(diags...)
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
