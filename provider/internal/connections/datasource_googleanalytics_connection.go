// Code generated by Polytomic. DO NOT EDIT.
// edit connections.yaml and re-run go generate

package connections

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/polytomic/terraform-provider-polytomic/internal/providerclient"
)

// Ensure provider defined types fully satisfy framework interfaces
var _ datasource.DataSource = &GoogleanalyticsConnectionDataSource{}

// ExampleDataSource defines the data source implementation.
type GoogleanalyticsConnectionDataSource struct {
	provider *providerclient.Provider
}

func (d *GoogleanalyticsConnectionDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if provider := providerclient.GetProvider(req.ProviderData, resp.Diagnostics); provider != nil {
		d.provider = provider
	}
}

func (d *GoogleanalyticsConnectionDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_googleanalytics_connection"
}

func (d *GoogleanalyticsConnectionDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: ":meta:subcategory:Connections: Google Analytics Connection",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "",
				Required:            true,
			},
			"organization": schema.StringAttribute{
				MarkdownDescription: "",
				Optional:            true,
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "",
				Computed:            true,
			},
			"configuration": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"auth_method": schema.StringAttribute{
						MarkdownDescription: `Authentication method`,
						Computed:            true,
					},
					"custom_reports": schema.StringAttribute{
						MarkdownDescription: `Custom reports

    One report per line. Format is a report name followed by a comma-separated list of fields. e.g. myReport:field1`,
						Computed: true,
					},
					"oauth_token_expiry": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            true,
					},
					"properties": schema.SetNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"label": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            true,
								},
								"value": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            true,
								},
							},
						},
					},
					"user_email": schema.StringAttribute{
						MarkdownDescription: `Connected user's email`,
						Computed:            true,
					},
				},
				Optional: true,
			},
		},
	}
}

func (d *GoogleanalyticsConnectionDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data connectionData

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Get the connection
	client, err := d.provider.Client(data.Organization.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error getting client", err.Error())
		return
	}
	connection, err := client.Connections.Get(ctx, data.Id.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error getting connection", err.Error())
		return
	}

	data.Id = types.StringPointerValue(connection.Data.Id)
	data.Name = types.StringPointerValue(connection.Data.Name)
	data.Organization = types.StringPointerValue(connection.Data.OrganizationId)
	var diags diag.Diagnostics
	data.Configuration, diags = types.ObjectValue(
		data.Configuration.AttributeTypes(ctx),
		map[string]attr.Value{
			"auth_method": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["auth_method"], "string").(string),
			),
			"custom_reports": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["custom_reports"], "string").(string),
			),
			"oauth_token_expiry": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["oauth_token_expiry"], "string").(string),
			),
			"properties": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["properties"], "string").(string),
			),
			"user_email": types.StringValue(
				getValueOrEmpty(connection.Data.Configuration["user_email"], "string").(string),
			),
		},
	)

	if diags.HasError() {
		resp.Diagnostics.Append(diags...)
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
